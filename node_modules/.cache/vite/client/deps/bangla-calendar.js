import "./chunk-NIBQISYW.js";

// node_modules/bangla-calendar/lib/esm/utils.js
var convertNumbers = function(data) {
  var numbers = {
    0: "০",
    1: "১",
    2: "২",
    3: "৩",
    4: "৪",
    5: "৫",
    6: "৬",
    7: "৭",
    8: "৮",
    9: "৯",
    ".": ".",
    "-": "-"
  };
  var result = "";
  if (!data) {
    return "";
  }
  var input = data.toString();
  var length = input.length;
  for (var i = 0; i < length; i++) {
    if (Number.isNaN(parseFloat(input[i])) || Number.isNaN(input[i] - 0)) {
      result += input[i];
    } else {
      result += numbers[input[i]];
    }
  }
  return result;
};
var banglaMonths = [
  "বৈশাখ",
  "জ্যৈষ্ঠ",
  "আষাঢ়",
  "শ্রাবণ",
  "ভাদ্র",
  "আশ্বিন",
  "কার্তিক",
  "অগ্রহায়ণ",
  "পৌষ",
  "মাঘ",
  "ফাল্গুন",
  "চৈত্র"
];
var banglaWeekDays = [
  "রবি",
  "সোম",
  "মঙ্গল",
  "বুধ",
  "বৃহস্পতি",
  "শুক্র",
  "শনি"
];
var isLeapYear = function(year) {
  if (year === void 0) {
    year = 0;
  }
  return year % 100 === 0 ? year % 400 === 0 : year % 4 === 0;
};
var isValidDate = function(date) {
  if (Object.prototype.toString.call(date) === "[object Date]") {
    if (isNaN(date)) {
      return false;
    }
    return true;
  }
  return false;
};
var formatDay = function(day, format) {
  if (day === void 0) {
    day = 1;
  }
  if (format === void 0) {
    format = "D";
  }
  var d = day.toString();
  switch (format) {
    case "DD":
      d = d.length === 1 ? "0".concat(d) : d;
      return convertNumbers(d);
    default:
      return convertNumbers(day);
  }
};
var formatWeekDay = function(day, format) {
  if (day === void 0) {
    day = 0;
  }
  if (format === void 0) {
    format = "eeee";
  }
  switch (format) {
    case "eee":
      return banglaWeekDays[day];
    default:
      return "".concat(banglaWeekDays[day], "বার");
  }
};
var formatMonth = function(month, format) {
  if (month === void 0) {
    month = 0;
  }
  if (format === void 0) {
    format = "MMMM";
  }
  var m = (month + 1).toString();
  switch (format) {
    case "M":
      return convertNumbers(m);
    case "MM":
      m = m.length === 1 ? "0".concat(m) : m;
      return convertNumbers(m);
    default:
      return banglaMonths[month];
  }
};
var formatYear = function(year, format) {
  if (year === void 0) {
    year = 0;
  }
  if (format === void 0) {
    format = "YYYY";
  }
  var y = year.toString();
  switch (format) {
    case "YY":
      return convertNumbers(y.substring(y.length - 2));
    case "YYYYb":
      return "".concat(convertNumbers(y), " (বঙ্গাব্দ)");
    default:
      return convertNumbers(y);
  }
};
var getJulianDate = function(year, month, day) {
  var y = year;
  var m = month;
  if (month <= 2) {
    y -= 1;
    m += 12;
  }
  var A = Math.floor(y / 100);
  var B = 2 - A + Math.floor(A / 4);
  var JD = Math.floor(365.25 * (y + 4716)) + Math.floor(30.6001 * (m + 1)) + day + B - 1524.5;
  return JD;
};
var monthLengthIN = [
  0,
  30.93081,
  62.35364,
  93.9999999999999,
  125.47636,
  156.48933,
  186.92405,
  216.3179999,
  246.3153999,
  275.14288,
  305.09428,
  334.91145,
  365.258756
];
var startJulianDate = 19380944629e-4;
var yearLength = 365.258756;
var errorMessage = "Invalid Date";

// node_modules/bangla-calendar/lib/esm/getDay.js
function getDayBD(day, month, year) {
  var banglaDay;
  switch (month) {
    case 0:
      banglaDay = day < 15 ? day + 16 : day - 14;
      break;
    case 1:
      banglaDay = day < 14 ? day + 17 : day - 13;
      break;
    case 2:
      if (isLeapYear(year)) {
        banglaDay = day < 15 ? day + 16 : day - 14;
      } else {
        banglaDay = day < 15 ? day + 15 : day - 14;
      }
      break;
    case 3:
      banglaDay = day < 14 ? day + 17 : day - 13;
      break;
    case 4:
      banglaDay = day < 15 ? day + 17 : day - 14;
      break;
    case 5:
      banglaDay = day < 15 ? day + 17 : day - 14;
      break;
    case 6:
      banglaDay = day < 16 ? day + 16 : day - 15;
      break;
    case 7:
      banglaDay = day < 16 ? day + 16 : day - 15;
      break;
    case 8:
      banglaDay = day < 16 ? day + 16 : day - 15;
      break;
    case 9:
      banglaDay = day < 17 ? day + 15 : day - 16;
      break;
    case 10:
      banglaDay = day < 16 ? day + 15 : day - 15;
      break;
    default:
      banglaDay = day < 16 ? day + 15 : day - 15;
      break;
  }
  return banglaDay;
}
function getDayIN(day, month, year) {
  var julianDate = getJulianDate(year, month + 1, day);
  if (julianDate < startJulianDate) {
    throw new Error(errorMessage);
  }
  var banglaYear = Math.floor((julianDate - startJulianDate) / yearLength);
  var calculatedJulianDate = startJulianDate + banglaYear * yearLength;
  var ps;
  var ns;
  var banglaDay;
  for (var i = 0; i < 12; i += 1) {
    ps = calculatedJulianDate + monthLengthIN[i];
    ns = calculatedJulianDate + monthLengthIN[i + 1];
    if (julianDate >= ps && julianDate <= Math.floor(ns) + 1.75) {
      banglaDay = Math.floor(julianDate - ps) + 1;
    }
  }
  return banglaDay;
}
function getDay(date, options) {
  if (date === void 0) {
    date = /* @__PURE__ */ new Date();
  }
  if (options === void 0) {
    options = { format: "D", calculationMethod: "BD" };
  }
  if (!isValidDate(date)) {
    throw new Error(errorMessage);
  }
  var inputDate = new Date(date);
  inputDate.setTime(inputDate.getTime() + (inputDate.getTimezoneOffset() + 360) * 60 * 1e3);
  var day = inputDate.getUTCDate();
  var month = inputDate.getMonth();
  var year = inputDate.getFullYear();
  var format = options.format, _a = options.calculationMethod, calculationMethod = _a === void 0 ? "BD" : _a;
  var banglaDay = calculationMethod === "BD" ? getDayBD(day, month, year) : getDayIN(day, month, year);
  var result = formatDay(banglaDay, format);
  return result;
}

// node_modules/bangla-calendar/lib/esm/getMonth.js
var getMonthIN = function(year, month, day) {
  var julianDate = getJulianDate(year, month + 1, day);
  if (julianDate < startJulianDate) {
    throw new Error(errorMessage);
  }
  var banglaYear = Math.floor((julianDate - startJulianDate) / yearLength);
  var calculatedJulianDate = startJulianDate + banglaYear * yearLength;
  var ps;
  var ns;
  var banglaMonth;
  for (var i = 0; i < 12; i += 1) {
    ps = calculatedJulianDate + monthLengthIN[i];
    ns = calculatedJulianDate + monthLengthIN[i + 1];
    if (julianDate >= ps && julianDate <= Math.floor(ns) + 1.75) {
      banglaMonth = i + 1;
    }
  }
  return banglaMonth - 1;
};
function getMonthBD(day, month) {
  var result;
  switch (true) {
    case (month === 4 && day > 14 || month === 5 && day < 15):
      result = 1;
      break;
    case (month === 5 && day > 14 || month === 6 && day < 16):
      result = 2;
      break;
    case (month === 6 && day > 15 || month === 7 && day < 16):
      result = 3;
      break;
    case (month === 7 && day > 15 || month === 8 && day < 16):
      result = 4;
      break;
    case (month === 8 && day > 15 || month === 9 && day < 17):
      result = 5;
      break;
    case (month === 9 && day > 16 || month === 10 && day < 16):
      result = 6;
      break;
    case (month === 10 && day > 15 || month === 11 && day < 16):
      result = 7;
      break;
    case (month === 11 && day > 15 || month === 0 && day < 15):
      result = 8;
      break;
    case (month === 0 && day > 14 || month === 1 && day < 14):
      result = 9;
      break;
    case (month === 1 && day > 13 || month === 2 && day < 15):
      result = 10;
      break;
    case (month === 2 && day > 14 || month === 3 && day < 14):
      result = 11;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}
function getMonth(date, options) {
  if (date === void 0) {
    date = /* @__PURE__ */ new Date();
  }
  if (options === void 0) {
    options = { format: "MMMM", calculationMethod: "BD" };
  }
  if (!isValidDate(date)) {
    throw new Error(errorMessage);
  }
  var inputDate = new Date(date);
  var day = inputDate.getUTCDate();
  var month = inputDate.getMonth();
  var year = inputDate.getFullYear();
  var format = options.format, _a = options.calculationMethod, calculationMethod = _a === void 0 ? "BD" : _a;
  var banglaMonth = calculationMethod === "BD" ? getMonthBD(day, month) : getMonthIN(year, month, day);
  var result = formatMonth(banglaMonth, format);
  return result;
}

// node_modules/bangla-calendar/lib/esm/getWeekDay.js
function getWeekDay(date, options) {
  if (date === void 0) {
    date = /* @__PURE__ */ new Date();
  }
  if (options === void 0) {
    options = { format: "eeee" };
  }
  if (!isValidDate(date))
    return errorMessage;
  var inputDate = new Date(date);
  var day = inputDate.getDay();
  return formatWeekDay(day, options.format);
}

// node_modules/bangla-calendar/lib/esm/getYear.js
var getYearIN = function(year, month, day) {
  var julianDate = getJulianDate(year, month + 1, day);
  if (julianDate < startJulianDate) {
    throw new Error(errorMessage);
  }
  return Math.floor((julianDate - startJulianDate) / yearLength) + 1;
};
function getYear(date, options) {
  if (date === void 0) {
    date = /* @__PURE__ */ new Date();
  }
  if (options === void 0) {
    options = { format: "YYYY", calculationMethod: "BD" };
  }
  if (!isValidDate(date)) {
    throw new Error(errorMessage);
  }
  var inputDate = new Date(date);
  var day = inputDate.getUTCDate();
  var month = inputDate.getMonth();
  var year = inputDate.getFullYear();
  var format = options.format, _a = options.calculationMethod, calculationMethod = _a === void 0 ? "BD" : _a;
  if (calculationMethod === "IN") {
    return formatYear(getYearIN(year, month, day), format);
  }
  var banglaYear = year - 593;
  if (month < 3 || month === 3 && day < 14) {
    banglaYear = year - 594;
  }
  if (banglaYear < 1) {
    throw new Error(errorMessage);
  }
  return formatYear(banglaYear, format);
}

// node_modules/bangla-calendar/lib/esm/getDate.js
function getDate(date, options) {
  if (date === void 0) {
    date = /* @__PURE__ */ new Date();
  }
  if (options === void 0) {
    options = {
      format: "eeee, D MMMM, YYYY",
      calculationMethod: "BD"
    };
  }
  if (!isValidDate(date)) {
    throw new Error(errorMessage);
  }
  var inputDate = new Date(date);
  inputDate.setTime(inputDate.getTime() + (inputDate.getTimezoneOffset() + 360) * 60 * 1e3);
  var _a = options.format, format = _a === void 0 ? "eeee, D MMMM, YYYY" : _a, _b = options.calculationMethod, calculationMethod = _b === void 0 ? "BD" : _b;
  var formattedDate = format.replace(/eeee|eee/gi, function(fmt) {
    switch (fmt) {
      case "eee":
        return getWeekDay(inputDate, { format: "eee", calculationMethod });
      default:
        return getWeekDay(inputDate, { calculationMethod });
    }
  });
  formattedDate = formattedDate.replace(/DD|D/gi, function(fmt) {
    switch (fmt) {
      case "DD":
        return getDay(inputDate, { format: "DD", calculationMethod });
      default:
        return getDay(inputDate, { calculationMethod });
    }
  });
  formattedDate = formattedDate.replace(/MMMM|MM|M/gi, function(fmt) {
    switch (fmt) {
      case "M":
        return getMonth(inputDate, { format: "M", calculationMethod });
      case "MM":
        return getMonth(inputDate, { format: "MM", calculationMethod });
      default:
        return getMonth(inputDate, { calculationMethod });
    }
  });
  formattedDate = formattedDate.replace(/YYYYb|YYYY|YY/gi, function(fmt) {
    switch (fmt) {
      case "YY":
        return getYear(inputDate, { format: "YY", calculationMethod });
      case "YYYYb":
        return getYear(inputDate, { format: "YYYYb", calculationMethod });
      default:
        return getYear(inputDate, { calculationMethod });
    }
  });
  return formattedDate;
}
export {
  getDate,
  getDay,
  getMonth,
  getWeekDay,
  getYear
};
//# sourceMappingURL=bangla-calendar.js.map
