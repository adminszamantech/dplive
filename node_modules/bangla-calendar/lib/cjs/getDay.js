'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./utils.js');

function getDayBD(day, month, year) {
    var banglaDay;
    switch (month) {
        case 0:
            banglaDay = day < 15 ? day + 16 : day - 14;
            break;
        case 1:
            banglaDay = day < 14 ? day + 17 : day - 13;
            break;
        case 2:
            if (utils.isLeapYear(year)) {
                banglaDay = day < 15 ? day + 16 : day - 14;
            }
            else {
                banglaDay = day < 15 ? day + 15 : day - 14;
            }
            break;
        case 3:
            banglaDay = day < 14 ? day + 17 : day - 13;
            break;
        case 4:
            banglaDay = day < 15 ? day + 17 : day - 14;
            break;
        case 5:
            banglaDay = day < 15 ? day + 17 : day - 14;
            break;
        case 6:
            banglaDay = day < 16 ? day + 16 : day - 15;
            break;
        case 7:
            banglaDay = day < 16 ? day + 16 : day - 15;
            break;
        case 8:
            banglaDay = day < 16 ? day + 16 : day - 15;
            break;
        case 9:
            banglaDay = day < 17 ? day + 15 : day - 16;
            break;
        case 10:
            banglaDay = day < 16 ? day + 15 : day - 15;
            break;
        default:
            banglaDay = day < 16 ? day + 15 : day - 15;
            break;
    }
    return banglaDay;
}
function getDayIN(day, month, year) {
    var julianDate = utils.getJulianDate(year, month + 1, day);
    if (julianDate < utils.startJulianDate) {
        throw new Error(utils.errorMessage);
    }
    var banglaYear = Math.floor((julianDate - utils.startJulianDate) / utils.yearLength);
    var calculatedJulianDate = utils.startJulianDate + banglaYear * utils.yearLength;
    var ps;
    var ns;
    var banglaDay;
    for (var i = 0; i < 12; i += 1) {
        ps = calculatedJulianDate + utils.monthLengthIN[i];
        ns = calculatedJulianDate + utils.monthLengthIN[i + 1];
        if (julianDate >= ps && julianDate <= Math.floor(ns) + 1.75) {
            banglaDay = Math.floor(julianDate - ps) + 1;
        }
    }
    return banglaDay;
}
function getDay(date, options) {
    if (date === void 0) { date = new Date(); }
    if (options === void 0) { options = { format: 'D', calculationMethod: 'BD' }; }
    if (!utils.isValidDate(date)) {
        throw new Error(utils.errorMessage);
    }
    var inputDate = new Date(date);
    inputDate.setTime(inputDate.getTime() + (inputDate.getTimezoneOffset() + 360) * 60 * 1000);
    var day = inputDate.getUTCDate();
    var month = inputDate.getMonth();
    var year = inputDate.getFullYear();
    var format = options.format, _a = options.calculationMethod, calculationMethod = _a === void 0 ? 'BD' : _a;
    var banglaDay = calculationMethod === 'BD'
        ? getDayBD(day, month, year)
        : getDayIN(day, month, year);
    var result = utils.formatDay(banglaDay, format);
    return result;
}

exports.getDay = getDay;
