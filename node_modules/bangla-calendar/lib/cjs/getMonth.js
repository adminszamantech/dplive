'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./utils.js');

var getMonthIN = function (year, month, day) {
    var julianDate = utils.getJulianDate(year, month + 1, day);
    if (julianDate < utils.startJulianDate) {
        throw new Error(utils.errorMessage);
    }
    var banglaYear = Math.floor((julianDate - utils.startJulianDate) / utils.yearLength);
    var calculatedJulianDate = utils.startJulianDate + banglaYear * utils.yearLength;
    var ps;
    var ns;
    var banglaMonth;
    for (var i = 0; i < 12; i += 1) {
        ps = calculatedJulianDate + utils.monthLengthIN[i];
        ns = calculatedJulianDate + utils.monthLengthIN[i + 1];
        if (julianDate >= ps && julianDate <= Math.floor(ns) + 1.75) {
            banglaMonth = i + 1;
        }
    }
    return banglaMonth - 1;
};
function getMonthBD(day, month) {
    var result;
    switch (true) {
        case (month === 4 && day > 14) || (month === 5 && day < 15):
            result = 1;
            break;
        case (month === 5 && day > 14) || (month === 6 && day < 16):
            result = 2;
            break;
        case (month === 6 && day > 15) || (month === 7 && day < 16):
            result = 3;
            break;
        case (month === 7 && day > 15) || (month === 8 && day < 16):
            result = 4;
            break;
        case (month === 8 && day > 15) || (month === 9 && day < 17):
            result = 5;
            break;
        case (month === 9 && day > 16) || (month === 10 && day < 16):
            result = 6;
            break;
        case (month === 10 && day > 15) || (month === 11 && day < 16):
            result = 7;
            break;
        case (month === 11 && day > 15) || (month === 0 && day < 15):
            result = 8;
            break;
        case (month === 0 && day > 14) || (month === 1 && day < 14):
            result = 9;
            break;
        case (month === 1 && day > 13) || (month === 2 && day < 15):
            result = 10;
            break;
        case (month === 2 && day > 14) || (month === 3 && day < 14):
            result = 11;
            break;
        default:
            result = 0;
            break;
    }
    return result;
}
function getMonth(date, options) {
    if (date === void 0) { date = new Date(); }
    if (options === void 0) { options = { format: 'MMMM', calculationMethod: 'BD' }; }
    if (!utils.isValidDate(date)) {
        throw new Error(utils.errorMessage);
    }
    var inputDate = new Date(date);
    var day = inputDate.getUTCDate();
    var month = inputDate.getMonth();
    var year = inputDate.getFullYear();
    var format = options.format, _a = options.calculationMethod, calculationMethod = _a === void 0 ? 'BD' : _a;
    var banglaMonth = calculationMethod === 'BD'
        ? getMonthBD(day, month)
        : getMonthIN(year, month, day);
    var result = utils.formatMonth(banglaMonth, format);
    return result;
}

exports.getMonth = getMonth;
