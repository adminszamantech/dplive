import { getDay } from './getDay.js';
import { getMonth } from './getMonth.js';
import { getWeekDay } from './getWeekDay.js';
import { getYear } from './getYear.js';
import { isValidDate, errorMessage } from './utils.js';

function getDate(date, options) {
    if (date === void 0) { date = new Date(); }
    if (options === void 0) { options = {
        format: 'eeee, D MMMM, YYYY',
        calculationMethod: 'BD'
    }; }
    if (!isValidDate(date)) {
        throw new Error(errorMessage);
    }
    var inputDate = new Date(date);
    inputDate.setTime(inputDate.getTime() + (inputDate.getTimezoneOffset() + 360) * 60 * 1000);
    var _a = options.format, format = _a === void 0 ? 'eeee, D MMMM, YYYY' : _a, _b = options.calculationMethod, calculationMethod = _b === void 0 ? 'BD' : _b;
    var formattedDate = format.replace(/eeee|eee/gi, function (fmt) {
        switch (fmt) {
            case 'eee':
                return getWeekDay(inputDate, { format: 'eee', calculationMethod: calculationMethod });
            default:
                return getWeekDay(inputDate, { calculationMethod: calculationMethod });
        }
    });
    formattedDate = formattedDate.replace(/DD|D/gi, function (fmt) {
        switch (fmt) {
            case 'DD':
                return getDay(inputDate, { format: 'DD', calculationMethod: calculationMethod });
            default:
                return getDay(inputDate, { calculationMethod: calculationMethod });
        }
    });
    formattedDate = formattedDate.replace(/MMMM|MM|M/gi, function (fmt) {
        switch (fmt) {
            case 'M':
                return getMonth(inputDate, { format: 'M', calculationMethod: calculationMethod });
            case 'MM':
                return getMonth(inputDate, { format: 'MM', calculationMethod: calculationMethod });
            default:
                return getMonth(inputDate, { calculationMethod: calculationMethod });
        }
    });
    formattedDate = formattedDate.replace(/YYYYb|YYYY|YY/gi, function (fmt) {
        switch (fmt) {
            case 'YY':
                return getYear(inputDate, { format: 'YY', calculationMethod: calculationMethod });
            case 'YYYYb':
                return getYear(inputDate, { format: 'YYYYb', calculationMethod: calculationMethod });
            default:
                return getYear(inputDate, { calculationMethod: calculationMethod });
        }
    });
    return formattedDate;
}

export { getDate };
